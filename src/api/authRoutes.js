'use strict';

// Import dependencies
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

// Define constants
const authDelay = 5;

// Declare new router and start defining routes:
const authRoutes = require('express').Router();

/**
 * /api/v1/login
 * ------
 * Handle API login requests.
 * ------
 * This will hash a token that should be identical to the one generated by the client.
 * (It will check up to five seconds back )
 * If validated, it will generate a token that can be used by the client for one hour.
 */
authRoutes.post('/login', async (req, res) => {
    let clientIsValid = false;
    let now;

    for (let time = now = Math.floor((new Date()).valueOf() / 1000); time >= now - authDelay && !clientIsValid; time--) {
        clientIsValid = await (new Promise((resolve, reject) => {
            bcrypt.compare(`${time}|${process.env.SECRET_CLIENT_ID}`, req.body.clientID, function(err, res) {
                if (err) {
                    reject(err);
                } else {
                    resolve(res);
                }
            });
        }));
    }

    if (!clientIsValid) {
        return res.status(401).json({ auth: false, token: null });
    }

    // create a token
    const token = jwt.sign({id: 'ApolloTV', message: 'This better be from our app...'}, process.env.SECRET_SERVER_ID, {
        expiresIn: 3600 // expires in 1 hour
    });

    // return the information including token as JSON
    res.json({auth: true, token});
});

/**
 * /api/v1/authenticated
 * ------
 * Allows a client to check if its token is valid.
 * ------
 * Returns a JSON object, with two parameters, 'auth' (bool) and 'message' (string).
 * If the client's token is valid, 'auth' will return true.
 * 'message' is just a human-readable message explaining the status.
 */
authRoutes.all('/authenticated', (req, res) => {
    if (req.method !== "GET" && req.method !== "POST") return res.json({ auth: false, message: "Invalid HTTP method." });

    // check header or url parameters or post parameters for token
    const token = req.headers['x-access-token'] || req.body.token || req.query.token;
    if (!token) return res.json({auth: false, message: 'You did not provide a token.'});

    // verifies secret and checks exp
    jwt.verify(token, process.env.SECRET_SERVER_ID, (err, decoded) => {
        if (err) return res.json({auth: false, message: 'Your token does not appear to be valid.'});

        // TODO: [ if everything is good, save to request for use in other routes ] ?
        // Did this get implemented? ~ SH
        res.json({auth: true, message: 'Your token is valid.'});
    });
});

module.exports = authRoutes;